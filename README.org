#+TITLE: Trabalho prático de Teste de Software

* Integrantes

 - Bárbara ...
 - Flávio Lúcio Corrêa Júnior
 - Vinícios Julião ...

* Descrição do trabalho

O trabalho consiste na escrita de um programa e um conjunto de testes. Os testes devem seguir as boas práticas descritas nas aulas da disciplina. O trabalho será dividido em duas etapas que consistem em:

** Etapa 1

- Projetar e implementar um sistema e software
- Implementar 50 testes de unidade (API públicas, comportamento, focados, não-complexos e etc)
- Configurar ferramenta de CI/CD Github Actions e rodar a bateria de testes em cada commit

** Etapa 2

@TODO

* Projeto do sistema

*** Qual sistema implementar?

A principal premissa a seguir é que seja algo de rápida implementação e alta testabilidade. Alguns exemplos estão propostos a seguir:

- Ferramenta de linha de comando (CLI): grep, wget, curl, ls, cd
- Sistema web (cliente/servidor): CRUD básico, TODO app
- Biblioteca: estrutura de dados, manipulação de arquivos
- Linguagem de programação: DSL, subconjunto de lisp ou python
- @TODO outras sugestões?

*** Com qual tech stack?

As tecnologias escolhidas dependerão do sistema escolhido.

**** Linguagem de programação

Algumas opções (kudos p/ quem topar fazer em uma das últimas 4):

- C/C++
- Python
- Javascript
- Go
- Rust
- Haskell
- Elixir
- Fsharp
- @TODO outras?

**** SGBD

@TODO

**** Bibliotecas / Frameworks

@TODO

*** Frameworks de teste?

Seguindo o modelo da pirâmide de testes, para cada tipo deve-se escolher uma biblioteca/framework para implementá-los:

- Testes de sistema (E2E): @TODO
- Testes de integração: @TODO
- Testes de unidade: @TODO

* Desenvolvimento

- [X] decidir sistema e tecnologias
- [3/7] configurar github actions
  - [X] boilerplate setup
  - [X] rodar testes com pytest
  - [X] rodar CI em diferentes máquinas
  - [ ] exigir cobertura de 100%
  - [ ] exigir formatação do `isort`
  - [ ] exigir type checking do `mypy`
  - [ ] exigir lint checking do `flake8`
- [X] separação de tarefas
- [ ] ...

* Como executar

Instale a ferramenta de gerenciamento de dependências `poetry`:

#+begin_src
curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
source $HOME/.poetry/env
#+end_src

Ative o ambiente virtual:

#+begin_src
poetry shell
#+end_src

Instale as dependências:

#+begin_src
poetry install
#+end_src

Rode a bateria de testes:

#+begin_src
poetry run pytest --cov .
#+end_src

Rode o programa principal:

#+begin_src
poetry run python main.py
#+end_src

Você pode querer formatar o código antes de abrir um PR, isso pode ser feito direto no seu editor de texto ou executando a CLI:

#+begin_src
black .
#+end_src
