#+TITLE: Trabalho prático de Teste de Software

* Integrantes

 - Bárbara Gomes Ribeiro
 - Flávio Lúcio Corrêa Júnior
 - Vinícios Julião Ramos

* Descrição do trabalho

O trabalho consiste na escrita de um programa e um conjunto de testes. Os testes devem seguir as boas práticas descritas nas aulas da disciplina. O trabalho será dividido em duas etapas que consistem em:

** Etapa 1

- Projetar e implementar um sistema e software
- Implementar 50 testes de unidade (API públicas, comportamento, focados, não-complexos e etc)
- Configurar ferramenta de CI/CD Github Actions e rodar a bateria de testes em cada commit

** Etapa 2

@TODO

* Projeto do sistema

*** Qual sistema implementar?

A principal premissa a seguir é que seja algo de rápida implementação e alta testabilidade. Seguindo essa linha, decidiu-se implementar uma biblioteca de algoritmos e estruturas de dados. O sistema consiste nos seguintes módulos:

- `queue`
- `stack`
- `linked list`
- `undirected graph`
- `directed graph`
- `tree`
- `quick_sort`
- `merge_sort`
- `bubble sort`
- `binary_search`
- `BFS`
- `DFS`

*** Com qual tech stack?

As tecnologias escolhidas foram:

- Linguagem de programação: Python
- Gerenciador de dependências: Poetry
- Biblioteca de testes: Pytest
- Linter: Flake8
- Formatter: Black, Isort

* Como executar

Instale a ferramenta de gerenciamento de dependências `poetry`:

#+begin_src
curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
source $HOME/.poetry/env
#+end_src

Ative o ambiente virtual:

#+begin_src
poetry shell
#+end_src

Instale as dependências:

#+begin_src
poetry install
#+end_src

Rode a bateria de testes:

#+begin_src
poetry run pytest --cov .
#+end_src

Rode o programa principal:

#+begin_src
poetry run python main.py
#+end_src

Você pode querer formatar o código ou rodar o linter antes de abrir um PR, isso pode ser feito direto no seu editor de texto ou executando a CLI:

- Linter:

#+begin_src
flake8 . --count
#+end_src

- Formatter:

#+begin_src
black .
#+end_src
